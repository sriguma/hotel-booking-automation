from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
from datetime import datetime
import time

class HotelBookingTest:
    def __init__(self):
        # Initialize webdriver (Chrome in this example)
        self.driver = webdriver.Chrome()
        self.wait = WebDriverWait(self.driver, 10)
        self.base_url = "https://hotel-booking-example.com"  # Replace with actual URL

    def setup(self):
        # Maximize window and navigate to website
        self.driver.maximize_window()
        self.driver.get(self.base_url)

    def search_hotel(self):
        try:
            # Find and fill destination
            destination_input = self.wait.until(
                EC.presence_of_element_located((By.ID, "destination"))
            )
            destination_input.clear()
            destination_input.send_keys("New York")
            
            # Select dates
            # Note: Date picker implementation might vary based on the application
            check_in = self.wait.until(
                EC.element_to_be_clickable((By.ID, "check-in"))
            )
            check_in.click()
            self.driver.find_element(By.xpath, "//td[@data-date='2024-04-10']").click()
            
            check_out = self.wait.until(
                EC.element_to_be_clickable((By.ID, "check-out"))
            )
            check_out.click()
            self.driver.find_element(By.xpath, "//td[@data-date='2024-04-15']").click()
            
            # Click search button
            search_button = self.driver.find_element(By.ID, "search-button")
            search_button.click()
            
            return True
            
        except Exception as e:
            print(f"Error in search_hotel: {str(e)}")
            return False

    def select_first_hotel(self):
        try:
            # Wait for search results and select first hotel
            first_hotel = self.wait.until(
                EC.element_to_be_clickable((By.CLASS_NAME, "hotel-item"))
            )
            # Store original price for later comparison
            self.original_price = float(self.driver.find_element(
                By.CLASS_NAME, "hotel-price").text.replace("$", ""))
            first_hotel.click()
            return True
            
        except Exception as e:
            print(f"Error in select_first_hotel: {str(e)}")
            return False

    def apply_coupon(self, coupon_code):
        try:
            # Find coupon input field and apply coupon
            coupon_input = self.wait.until(
                EC.presence_of_element_located((By.ID, "coupon-code"))
            )
            coupon_input.clear()
            coupon_input.send_keys(coupon_code)
            
            apply_button = self.driver.find_element(By.ID, "apply-coupon")
            apply_button.click()
            
            # Wait for discount to be applied
            time.sleep(2)
            
            return True
            
        except Exception as e:
            print(f"Error in apply_coupon: {str(e)}")
            return False

    def verify_discount(self):
        try:
            # Get discounted price
            discounted_price = float(self.driver.find_element(
                By.CLASS_NAME, "final-price").text.replace("$", ""))
            
            # Calculate expected price (25% discount)
            expected_price = self.original_price * 0.75
            
            # Verify discount is correct (allowing small difference for rounding)
            assert abs(discounted_price - expected_price) < 0.01, \
                "Discount not applied correctly"
            
            return True
            
        except Exception as e:
            print(f"Error in verify_discount: {str(e)}")
            return False

    def proceed_to_checkout(self):
        try:
            # Click checkout button
            checkout_button = self.wait.until(
                EC.element_to_be_clickable((By.ID, "checkout-button"))
            )
            checkout_button.click()
            
            # Verify we're on checkout page
            assert "checkout" in self.driver.current_url.lower()
            
            return True
            
        except Exception as e:
            print(f"Error in proceed_to_checkout: {str(e)}")
            return False

    def cleanup(self):
        # Close browser
        self.driver.quit()

    def run_test(self):
        try:
            self.setup()
            assert self.search_hotel(), "Hotel search failed"
            assert self.select_first_hotel(), "Hotel selection failed"
            assert self.apply_coupon("SUMMER25"), "Coupon application failed"
            assert self.verify_discount(), "Discount verification failed"
            assert self.proceed_to_checkout(), "Checkout process failed"
            print("Test completed successfully!")
            
        except AssertionError as e:
            print(f"Test failed: {str(e)}")
            
        finally:
            self.cleanup()


# Run the test
if __name__ == "__main__":
    test = HotelBookingTest()
    test.run_test()
